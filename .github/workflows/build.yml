name: Android Auditd CI

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: '选择构建类型'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
      target_abi:
        description: '目标设备架构'
        required: true
        default: 'arm64-v8a'
        type: choice
        options:
          - armeabi-v7a
          - arm64-v8a
          - x86
          - x86_64
          
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      TARGET_ABI: ${{ github.event.inputs.target_abi || 'arm64-v8a' }}
      BUILD_TYPE: ${{ github.event.inputs.build_type || 'debug' }}

    steps:
    # 1. 检出代码
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. 分析项目结构
    - name: Analyze project structure
      id: project-structure
      run: |
        # 查找可能的项目根目录
        if [ -d "auditd_for_android" ]; then
          echo "Found project in 'auditd_for_android' directory"
          echo "PROJECT_ROOT=auditd_for_android" >> $GITHUB_ENV
        else
          echo "Using repository root as project directory"
          echo "PROJECT_ROOT=." >> $GITHUB_ENV
        fi
        
        # 列出目录结构用于调试
        echo "Project structure:"
        find $PROJECT_ROOT -maxdepth 2 -type d | sort

    # 3. 设置 Java 11 用于 Android SDK
    - name: Set up JDK 11 for Android SDK
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'gradle'

    # 4. 安装 Android SDK 和 NDK
    - name: Setup Android SDK and NDK
      run: |
        # 创建 SDK 目录
        mkdir -p android-sdk
        
        # 下载命令行工具
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-*.zip -d cmdline-tools
        
        # 组织目录结构
        mkdir -p android-sdk/cmdline-tools/latest
        mv cmdline-tools/cmdline-tools/* android-sdk/cmdline-tools/latest/
        rm -rf cmdline-tools
        
        # 设置环境变量
        export ANDROID_HOME=$PWD/android-sdk
        export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
        
        # 接受许可
        yes | sdkmanager --licenses >/dev/null 2>&1
        
        # 安装指定版本的 NDK
        sdkmanager "ndk;25.1.8937393"
        
        # 设置环境变量供后续步骤使用
        echo "NDK_HOME=$ANDROID_HOME/ndk/25.1.8937393" >> $GITHUB_ENV
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/ndk/25.1.8937393:$PATH" >> $GITHUB_ENV

    # 5. 构建原生组件 (使用动态路径)
    - name: Build native binaries
      run: |
        echo "Building native components for $TARGET_ABI"
        export APP_ABI=$TARGET_ABI
        
        # 进入项目根目录
        cd $PROJECT_ROOT
        
        # 动态查找组件目录
        components=()
        if [ -d "auditd" ]; then
          components+=("auditd")
        elif [ -d "src/auditd" ]; then
          components+=("src/auditd")
        fi
        
        if [ -d "forensikmediator" ]; then
          components+=("forensikmediator")
        elif [ -d "src/forensikmediator" ]; then
          components+=("src/forensikmediator")
        fi
        
        if [ -d "audit-dispatch" ]; then
          components+=("audit-dispatch")
        elif [ -d "src/audit-dispatch" ]; then
          components+=("src/audit-dispatch")
        fi
        
        if [ ${#components[@]} -eq 0 ]; then
          echo "::error::No component directories found!"
          find . -maxdepth 3 -type d
          exit 1
        fi
        
        echo "Found components: ${components[*]}"
        
        # 构建所有原生组件
        for component in "${components[@]}"; do
          echo "Building $component..."
          cd $component
          
          # 使用 ndk-build 编译
          $NDK_HOME/ndk-build NDK_APPLICATION_MK=./Application.mk
          
          # 检查输出文件
          ls -l libs/$TARGET_ABI/
          cd ..
        done

    # 6. 切换到 Java 8 用于构建 Android 应用
    - name: Set up JDK 8 for Gradle
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: 'gradle'

    # 7. 构建 Android 应用 (使用动态路径)
    - name: Build Android APK
      run: |
        cd $PROJECT_ROOT
        
        # 动态查找 Android 应用目录
        if [ -d "AndroidForensik" ]; then
          echo "Building APK from AndroidForensik directory"
          cd AndroidForensik
        elif [ -d "android-forensik" ]; then
          echo "Building APK from android-forensik directory"
          cd android-forensik
        elif [ -d "app" ]; then
          echo "Building APK from app directory"
          cd app
        elif [ -d "src/android" ]; then
          echo "Building APK from src/android directory"
          cd src/android
        else
          echo "::error::Could not find Android application directory"
          find . -maxdepth 3 -type d
          exit 1
        fi
        
        # 添加 gradlew 执行权限
        chmod +x gradlew
        
        # 使用 JDK 8 运行 Gradle
        ./gradlew assemble$BUILD_TYPE
        
        # 列出生成的 APK
        find . -name "*.apk"

    # 8. 准备部署包
    - name: Prepare deployment package
      run: |
        # 创建部署目录
        DEPLOY_DIR="auditd_deploy_${{ env.TARGET_ABI }}_${{ env.BUILD_TYPE }}"
        mkdir -p $DEPLOY_DIR/system/bin
        
        # 复制原生二进制文件
        if [ -d "$PROJECT_ROOT/auditd/libs/$TARGET_ABI" ]; then
          cp $PROJECT_ROOT/auditd/libs/$TARGET_ABI/auditd $DEPLOY_DIR/system/bin/
        elif [ -d "$PROJECT_ROOT/src/auditd/libs/$TARGET_ABI" ]; then
          cp $PROJECT_ROOT/src/auditd/libs/$TARGET_ABI/auditd $DEPLOY_DIR/system/bin/
        fi
        
        if [ -d "$PROJECT_ROOT/forensikmediator/libs/$TARGET_ABI" ]; then
          cp $PROJECT_ROOT/forensikmediator/libs/$TARGET_ABI/forensikmediator $DEPLOY_DIR/system/bin/
        elif [ -d "$PROJECT_ROOT/src/forensikmediator/libs/$TARGET_ABI" ]; then
          cp $PROJECT_ROOT/src/forensikmediator/libs/$TARGET_ABI/forensikmediator $DEPLOY_DIR/system/bin/
        fi
        
        if [ -d "$PROJECT_ROOT/audit-dispatch/libs/$TARGET_ABI" ]; then
          cp $PROJECT_ROOT/audit-dispatch/libs/$TARGET_ABI/audit-dispatch $DEPLOY_DIR/system/bin/
        elif [ -d "$PROJECT_ROOT/src/audit-dispatch/libs/$TARGET_ABI" ]; then
          cp $PROJECT_ROOT/src/audit-dispatch/libs/$TARGET_ABI/audit-dispatch $DEPLOY_DIR/system/bin/
        fi
        
        # 复制 APK 文件
        find . -path "*/app/build/outputs/apk/$BUILD_TYPE/*.apk" -exec cp {} $DEPLOY_DIR/ \;
        
        # 打包部署文件
        zip -r $DEPLOY_DIR.zip $DEPLOY_DIR

    # 9. 上传构建产物
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: auditd_deployment_${{ env.TARGET_ABI }}_${{ env.BUILD_TYPE }}
        path: |
          auditd_deploy_*.zip
