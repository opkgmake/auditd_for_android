name: Android Auditd CI

on:
  # 添加 workflow_dispatch 以支持手动触发
  workflow_dispatch:
    inputs:
      build_type:
        description: '选择构建类型'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
      target_abi:
        description: '目标设备架构'
        required: true
        default: 'arm64-v8a'
        type: choice
        options:
          - armeabi-v7a
          - arm64-v8a
          - x86
          - x86_64
          
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    # 使用手动触发输入的参数
    strategy:
      matrix:
        abi: ${{ github.event.inputs.target_abi || 'arm64-v8a' }}
        build_type: ${{ github.event.inputs.build_type || 'debug' }}

    steps:
    # 1. 检出代码
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. 设置 JDK
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    # 3. 安装 Android SDK 和 NDK
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      with:
        ndk-version: '25.1.8937393'

    # 4. 配置环境变量（添加手动触发参数）
    - name: Set environment variables
      run: |
        echo "NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "PATH=$ANDROID_NDK_ROOT:$PATH" >> $GITHUB_ENV
        echo "TARGET_ABI=${{ matrix.abi }}" >> $GITHUB_ENV
        echo "BUILD_TYPE=${{ matrix.build_type }}" >> $GITHUB_ENV
        
        # 设置构建参数
        echo "GRADLE_BUILD_TYPE=${{ matrix.build_type == 'release' ? 'Release' : 'Debug' }}" >> $GITHUB_ENV
        echo "NDK_ABI=${{ matrix.abi }}" >> $GITHUB_ENV

    # 5. 编译原生组件（使用手动触发的参数）
    - name: Build native binaries
      run: |
        echo "Building for $TARGET_ABI ($BUILD_TYPE)"
        
        # 设置 ABI 参数
        export APP_ABI=$TARGET_ABI
        
        # 编译所有组件
        cd auditd && ./build.sh
        cd ../forensikmediator && ./build.sh
        cd ../audit-dispatch && ./build.sh
        
        # 列出生成的二进制文件
        find . -name "*.so" -o -name "auditd" -o -name "forensikmediator" -o -name "audit-dispatch"

    # 6. 编译 Android 应用（使用手动触发的参数）
    - name: Build Android APK
      run: |
        cd AndroidForensik
        ./gradlew assemble$GRADLE_BUILD_TYPE
        ls -l app/build/outputs/apk/$GRADLE_BUILD_TYPE/

    # 7. 上传构建产物
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: auditd_binaries_${{ matrix.abi }}_${{ matrix.build_type }}
        path: |
          auditd/libs/
          forensikmediator/libs/
          audit-dispatch/libs/
          AndroidForensik/app/build/outputs/apk/$GRADLE_BUILD_TYPE/
          
    # 8. 添加通知（可选）
    - name: Notify on completion
      if: ${{ always() }}
      uses: actions/github-script@v6
      with:
        script: |
          const status = job.status == 'success' ? '✅ 成功' : '❌ 失败'
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `构建结果: ${status}\n` +
                   `架构: ${{ matrix.abi }}\n` +
                   `类型: ${{ matrix.build_type }}\n` +
                   `[查看日志](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
          })
