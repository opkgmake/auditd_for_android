name: Android Auditd Binaries

on:
  workflow_dispatch:
    inputs:
      target_abi:
        description: '目标设备架构'
        required: true
        default: 'arm64-v8a'
        type: choice
        options:
          - armeabi-v7a
          - arm64-v8a

jobs:
  build:
    runs-on: ubuntu-latest
    container: 
      image: silkeh/clang:android-ndk
      options: --privileged
    
    env:
      TARGET_ABI: ${{ github.event.inputs.target_abi || 'arm64-v8a' }}
      NDK_HOME: /opt/android-ndk

    steps:
    # 1. 检出代码
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. 设置构建环境
    - name: Setup environment
      run: |
        # 创建输出目录
        mkdir -p binaries/$TARGET_ABI
        
        # 设置工具链路径
        if [ "$TARGET_ABI" = "armeabi-v7a" ]; then
          export TOOLCHAIN=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi
          export TARGET=armv7a-linux-androideabi
        else
          export TOOLCHAIN=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android
          export TARGET=aarch64-linux-android
        fi
        
        echo "TOOLCHAIN=$TOOLCHAIN" >> $GITHUB_ENV
        echo "TARGET=$TARGET" >> $GITHUB_ENV

    # 3. 直接编译核心组件
    - name: Build ausearch
      run: |
        cd auditd_port/ausearch/src
        
        # 直接编译 ausearch
        $TOOLCHAIN$TARGET-clang \
          -I../include \
          -I../../auparse \
          -D_GNU_SOURCE \
          *.c \
          -o $GITHUB_WORKSPACE/binaries/$TARGET_ABI/ausearch
        
        strip $GITHUB_WORKSPACE/binaries/$TARGET_ABI/ausearch

    - name: Build auparse
      run: |
        cd auditd_port/auparse/src
        
        # 直接编译 auparse
        $TOOLCHAIN$TARGET-clang \
          -I../include \
          -D_GNU_SOURCE \
          *.c \
          -o $GITHUB_WORKSPACE/binaries/$TARGET_ABI/auparse
        
        strip $GITHUB_WORKSPACE/binaries/$TARGET_ABI/auparse

    - name: Build auditd
      run: |
        cd audit_system_components/src
        
        # 直接编译 auditd
        $TOOLCHAIN$TARGET-clang \
          -I../include \
          -D_GNU_SOURCE \
          auditd.c \
          -o $GITHUB_WORKSPACE/binaries/$TARGET_ABI/auditd
        
        strip $GITHUB_WORKSPACE/binaries/$TARGET_ABI/auditd

    - name: Build forensikmediator
      run: |
        cd audit_system_components/src
        
        # 直接编译 forensikmediator
        $TOOLCHAIN$TARGET-clang \
          -I../include \
          -D_GNU_SOURCE \
          forensikmediator.c \
          -o $GITHUB_WORKSPACE/binaries/$TARGET_ABI/forensikmediator
        
        strip $GITHUB_WORKSPACE/binaries/$TARGET_ABI/forensikmediator

    - name: Build audit-dispatch
      run: |
        cd audit_system_components/src
        
        # 直接编译 audit-dispatch
        $TOOLCHAIN$TARGET-clang \
          -I../include \
          -D_GNU_SOURCE \
          audit-dispatch.c \
          -o $GITHUB_WORKSPACE/binaries/$TARGET_ABI/audit-dispatch
        
        strip $GITHUB_WORKSPACE/binaries/$TARGET_ABI/audit-dispatch

    # 4. 收集并上传二进制文件
    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
        name: auditd_binaries_${{ env.TARGET_ABI }}
        path: binaries/${{ env.TARGET_ABI }}/*
