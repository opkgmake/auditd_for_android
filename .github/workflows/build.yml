name: Android Auditd CI

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: '选择构建类型'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
      target_abi:
        description: '目标设备架构'
        required: true
        default: 'arm64-v8a'
        type: choice
        options:
          - armeabi-v7a
          - arm64-v8a
          - x86
          - x86_64
          
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      TARGET_ABI: ${{ github.event.inputs.target_abi || 'arm64-v8a' }}
      BUILD_TYPE: ${{ github.event.inputs.build_type || 'debug' }}

    steps:
    # 1. 检出代码
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. 设置兼容的 JDK 版本
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'  # 使用兼容 Gradle 4.1 的 JDK 8
        distribution: 'temurin'

    # 3. 安装 Android SDK 和 NDK
    - name: Setup Android SDK and NDK
      run: |
        # 创建 SDK 目录
        mkdir -p android-sdk
        
        # 下载命令行工具
        wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip commandlinetools-linux-*.zip -d cmdline-tools
        
        # 组织目录结构
        mkdir -p android-sdk/cmdline-tools/latest
        mv cmdline-tools/cmdline-tools/* android-sdk/cmdline-tools/latest/
        rm -rf cmdline-tools
        
        # 设置环境变量
        export ANDROID_HOME=$PWD/android-sdk
        export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
        
        # 接受许可
        yes | sdkmanager --licenses
        
        # 安装指定版本的 NDK
        sdkmanager "ndk;25.1.8937393"
        
        # 设置环境变量供后续步骤使用
        echo "NDK_HOME=$ANDROID_HOME/ndk/25.1.8937393" >> $GITHUB_ENV
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/ndk/25.1.8937393:$PATH" >> $GITHUB_ENV

    # 4. 设置构建类型变量
    - name: Set Gradle build type
      run: |
        if [ "$BUILD_TYPE" = "release" ]; then
          echo "GRADLE_BUILD_TYPE=Release" >> $GITHUB_ENV
        else
          echo "GRADLE_BUILD_TYPE=Debug" >> $GITHUB_ENV
        fi

    # 5. 编译原生组件
    - name: Build native binaries
      run: |
        echo "Building for $TARGET_ABI ($BUILD_TYPE)"
        export APP_ABI=$TARGET_ABI
        
        # 确保在项目根目录
        cd $GITHUB_WORKSPACE
        
        # 编译所有组件
        cd auditd && ./build.sh
        cd ..
        cd forensikmediator && ./build.sh
        cd ..
        cd audit-dispatch && ./build.sh
        cd ..
        
        find . -name "*.so" -o -name "auditd" -o -name "forensikmediator" -o -name "audit-dispatch"

    # 6. 构建 Android APK
    - name: Build Android APK
      run: |
        # 确保在项目根目录
        cd $GITHUB_WORKSPACE
        
        # 查找 Android 应用目录
        if [ -d "AndroidForensik" ]; then
          echo "Building APK from AndroidForensik directory"
          cd AndroidForensik
        elif [ -d "android-forensik" ]; then
          echo "Building APK from android-forensik directory"
          cd android-forensik
        elif [ -d "app" ]; then
          echo "Building APK from app directory"
          cd app
        else
          echo "Error: Could not find Android application directory"
          ls -la
          exit 1
        fi
        
        # 添加 gradlew 执行权限
        chmod +x gradlew
        
        # 使用 JDK 8 运行 Gradle
        ./gradlew assemble$GRADLE_BUILD_TYPE
        
        # 列出生成的 APK
        find . -name "*.apk"

    # 7. 上传构建产物
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: auditd_binaries_${{ env.TARGET_ABI }}_${{ env.BUILD_TYPE }}
        path: |
          auditd/libs/
          forensikmediator/libs/
          audit-dispatch/libs/
          */app/build/outputs/apk/$GRADLE_BUILD_TYPE/
